#!/usr/bin/env python

import sys
import os
import os.path
import datetime
import copy
import time as time

from configobj import ConfigObj

import numpy as np

from ps2ff.integration_loops import mag_dist_loop
from ps2ff.config import (get_configspec,
                          get_custom_validator,
                          check_config,
                          config_error)


def main():

    start_datetime = datetime.datetime.now().isoformat()

    config_file = sys.argv[-1]
    if not os.path.exists(config_file):
        raise Exception("Config file %s doesn't exist" % (config_file))

    spec_file = get_configspec()
    validator = get_custom_validator()
    config = ConfigObj(config_file, configspec=spec_file)

    results = config.validate(validator)
    if not isinstance(results, bool) or not results:
        config_error(config, results)

    check_config(config)

    filebase = copy.copy(config['what'].value)
    if 'datadir' in config:
        datadir = config['datadir']
    else:
        datadir = 'data'

    if os.path.isdir(datadir) is False:
        os.mkdir(datadir)

    if config['LW'] is True:
        filename = "%s_%s_mech%s_LW_seis%g_%g" % (filebase,
            config['rup_dim_model'].value, config['mech'].value,
            config['min_seis_depth'], config['max_seis_depth'])
    else:
        filename = "%s_%s_mech%s_ar%.1f_seis%g_%g" % (filebase,
            config['rup_dim_model'].value, config['mech'].value, config['AR'],
            config['min_seis_depth'], config['max_seis_depth'])

    filename = filename.replace(".", "p")
    filename = os.path.join(datadir, filename)

    config['mindip'] = config['mindip_deg'] * np.pi / 180.0
    config['maxdip'] = config['maxdip_deg'] * np.pi / 180.0
    M = np.arange(config['minmag'], config['maxmag'] + 0.001, config['dmag'])
    Repi = np.logspace(np.log10(config['minepi']),
                       np.log10(config['maxepi']),
                       config['nepi'])
    #
    # This is where the work happens. Fork off NP subprocesses to
    # do the integration on subsets of the Repi range
    #
    for iP in range(config['NP']):
        if os.fork() == 0:
            mag_dist_loop(config, iP=iP, filename=filename, M=M, Repi=Repi)

    #
    # Wait for all of the subprocesses to finish
    #
    for iP in range(config['NP']):
        pid, status = os.waitpid(-1, 0)

    #
    # First assemble the ratios file from the sub-files, then do
    # the variances
    #
    nmag = np.size(M)
    for sym, fname in (('R', 'Ratios'), ('V', 'Var')):
        f = open('%s_%s.csv' % (filename, fname), 'w')
        f.write('# Program: %s\n' % sys.argv[0])
        f.write('# Config file: %s\n' % config_file)
        f.write('# Process start: %s\n' % start_datetime)
        f.write('# Process finish: %s\n' % datetime.datetime.now().isoformat())
        f.write('# rup_dim_model = %s, mech = %s, LW = %s, AR = %s, '
                'ndip = %d, mindip = %f, maxdip = %f, ntheta = %d, '
                'nxny = %d\n' % (config['rup_dim_model'].value,
                                 config['mech'].value,
                                 config['LW'], config['AR'], config['ndip'],
                                 config['mindip'], config['maxdip'],
                                 config['ntheta'], config['nxny']))
        f.write('# neps = %d, trunc = %f, min_seis_depth = %f, '
                'max_seis_depth = %f\n' % (config['neps'], config['trunc'],
                                           config['min_seis_depth'],
                                           config['max_seis_depth']))
        f.write('"Repi_km",')

        for j in range(nmag):
            f.write('"%s%g"' % (sym, M[j]))
            if j < nmag - 1:
                f.write(',')
        f.write("\n")

        sub_file = [None] * config['NP']
        fs = [None] * config['NP']
        for iP in range(config['NP']):
            sub_file[iP] = '%s%s_%02d.csv' % (filename, fname, iP)
            fs[iP] = open(sub_file[iP], 'r')

        for line in fs[0]:
            f.write(line)
            for iP in range(1, config['NP']):
                line = fs[iP].readline()
                if line:
                    f.write(line)

        for iP in range(config['NP']):
            fs[iP].close()
            os.unlink(sub_file[iP])
        f.close()


if __name__ == "__main__":

    start_time = time.time()

    main()

    print("Total execution time %f seconds." % (time.time() - start_time))
    sys.exit(0)
