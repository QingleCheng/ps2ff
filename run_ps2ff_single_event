#!/usr/bin/env python

from __future__ import division
from __future__ import print_function

import sys
import os
import os.path
import datetime
try:
    import configparser
except ImportError:
    import ConfigParser as configparser
import time as time
import numpy as np

from ps2ff.integration_loops import single_event_loop


def main():

    start_datetime = datetime.datetime.now().isoformat()

    config_file = sys.argv[-1]
    if not os.path.exists(config_file):
        raise Exception("Config file %s doesn't exist" % (config_file))

    Config = configparser.ConfigParser()
    Config.read(config_file)
    section = Config.sections()[0]

    NP = Config.getint(section, 'NP')
    datadir = Config.get(section, 'datadir')
    M = Config.getfloat(section, 'M')
    zhyp = Config.getfloat(section, 'zhyp')
    bytheta = Config.getboolean(section, 'bytheta')
    rup_dim_model = Config.get(section, 'rup_dim_model')
    mech = Config.get(section, 'mech')
    AR = Config.getfloat(section, 'AR')
    ndip = Config.getint(section, 'ndip')
    mindip_deg = Config.getfloat(section, 'mindip_deg')
    maxdip_deg = Config.getfloat(section, 'maxdip_deg')
    ntheta = Config.getint(section, 'ntheta')
    nxny = Config.getint(section, 'nxny')
    neps = Config.getint(section, 'neps')
    trunc = Config.getfloat(section, 'trunc')
    minepi = Config.getfloat(section, 'minepi')
    maxepi = Config.getfloat(section, 'maxepi')
    nepi = Config.getint(section, 'nepi')
    min_seis_depth = Config.getfloat(section, 'min_seis_depth')
    max_seis_depth = Config.getfloat(section, 'max_seis_depth')

    if os.path.isdir(datadir) is False:
        os.mkdir(datadir)

    theta_string = ''
    if bytheta is True:
        theta_string = '_bytheta'

    rjb_filename = os.path.join(datadir, "Rjb%s" % (theta_string))
    rrup_filename = os.path.join(datadir, "Rrup%s" % (theta_string))

    mindip = mindip_deg * np.pi / 180.0
    maxdip = maxdip_deg * np.pi / 180.0
    Repi = np.logspace(np.log10(minepi), np.log10(maxepi), nepi)

    for iP in range(0, NP):
        if os.fork() == 0:
            single_event_loop(rup_dim_model=rup_dim_model, mech=mech, AR=AR,
                              ndip=ndip, mindip=mindip, maxdip=maxdip,
                              min_seis_depth=min_seis_depth,
                              max_seis_depth=max_seis_depth,
                              ntheta=ntheta, nxny=nxny, zhyp=zhyp,
                              bytheta=bytheta, neps=neps,
                              trunc=trunc, NP=NP, iP=iP,
                              rjb_filename=rjb_filename,
                              rrup_filename=rrup_filename, M=M, Repi=Repi)

    for iP in range(0, NP):
        pid, status = os.waitpid(-1, 0)

    fd = [None] * 4
    fd[0] = open('%s_Ratios.csv' % (rjb_filename), 'w')
    fd[1] = open('%s_Var.csv' % (rjb_filename), 'w')
    fd[2] = open('%s_Ratios.csv' % (rrup_filename), 'w')
    fd[3] = open('%s_Var.csv' % (rrup_filename), 'w')

    for i in range(0, 4):
        fd[i].write('# Program: %s\n' % sys.argv[0])
        fd[i].write('# Config file: %s\n' % config_file)
        fd[i].write('# Process start: %s\n' % start_datetime)
        fd[i].write('# Process finish: %s\n' %
                    datetime.datetime.now().isoformat())
        fd[i].write('# M = %f, zhyp = %f, bytheta = %s, rup_dim_model = %s, '
                    'mech = %s, AR = %s, ndip = %d, mindip = %f, maxdip = %f\n'
                    % (M, zhyp, bytheta, rup_dim_model, mech, AR, ndip,
                       mindip, maxdip))
        fd[i].write('# ntheta = %d, nxny = %d, neps = %d, trunc = %f, '
                    'min_seis_depth = %f, max_seis_depth = %f\n'
                    % (ntheta, nxny, neps, trunc, min_seis_depth,
                       max_seis_depth))
        fd[i].write('"Repi_km",')

    if bytheta is True:
        theta = np.linspace(0, 2 * np.pi, ntheta)
        for i in range(0, 4):
            for j in range(0, ntheta):
                fd[i].write('"%g"' % (theta[j]))
                if j < ntheta - 1:
                    fd[i].write(',')
            fd[i].write("\n")
    else:
        fd[0].write('"R%g"\n' % M)
        fd[1].write('"V%g"\n' % M)
        fd[2].write('"R%g"\n' % M)
        fd[3].write('"V%g"\n' % M)

    rjb_rat_file = [None] * NP
    rjb_var_file = [None] * NP
    rrup_rat_file = [None] * NP
    rrup_var_file = [None] * NP
    rjb_frs = [None] * NP
    rjb_fvs = [None] * NP
    rrup_frs = [None] * NP
    rrup_fvs = [None] * NP
    for iP in range(0, NP):
        rjb_rat_file[iP] = '%sRatios_%02d.csv' % (rjb_filename, iP)
        rjb_var_file[iP] = '%sVar_%02d.csv' % (rjb_filename, iP)
        rrup_rat_file[iP] = '%sRatios_%02d.csv' % (rrup_filename, iP)
        rrup_var_file[iP] = '%sVar_%02d.csv' % (rrup_filename, iP)
        rjb_frs[iP] = open(rjb_rat_file[iP], 'r')
        rjb_fvs[iP] = open(rjb_var_file[iP], 'r')
        rrup_frs[iP] = open(rrup_rat_file[iP], 'r')
        rrup_fvs[iP] = open(rrup_var_file[iP], 'r')

    for line in rjb_frs[0]:
        fd[0].write(line)
        line = rjb_fvs[0].readline()
        fd[1].write(line)
        line = rrup_frs[0].readline()
        fd[2].write(line)
        line = rrup_fvs[0].readline()
        fd[3].write(line)
        for iP in range(1, NP):
            line = rjb_frs[iP].readline()
            if line:
                fd[0].write(line)
            line = rjb_fvs[iP].readline()
            if line:
                fd[1].write(line)
            line = rrup_frs[iP].readline()
            if line:
                fd[2].write(line)
            line = rrup_fvs[iP].readline()
            if line:
                fd[3].write(line)

    for iP in range(0, NP):
        rjb_frs[iP].close()
        rjb_fvs[iP].close()
        rrup_frs[iP].close()
        rrup_fvs[iP].close()
        os.unlink(rjb_rat_file[iP])
        os.unlink(rjb_var_file[iP])
        os.unlink(rrup_rat_file[iP])
        os.unlink(rrup_var_file[iP])

    for i in range(0, 4):
        fd[i].close()


if __name__ == "__main__":

    start_time = time.time()

    main()

    print("Total execution time %f seconds." % (time.time() - start_time))
    sys.exit(0)
